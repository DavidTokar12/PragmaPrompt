name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  POETRY_VERSION: "2.1.4"
  POETRY_VENV: ".venv"
  PACKAGE: "pragma_prompt"

jobs:
  quality:
    name: Lint & Typecheck (single Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (3.12)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Enable in-project venv
        run: poetry config virtualenvs.in-project true

      - name: Cache Poetry & venv
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.POETRY_VENV }}
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-py312-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies (dev)
        run: poetry install --with dev --no-interaction

      - name: Ruff
        run: poetry run ruff check .

      - name: Black
        run: poetry run black --check .

      - name: MyPy
        run: poetry run mypy --config-file pyproject.toml

  tests:
    name: Tests (Python ${{ matrix.python }})
    needs: quality
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Enable in-project venv
        run: poetry config virtualenvs.in-project true

      - name: Cache Poetry & venv
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.POETRY_VENV }}
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-py${{ matrix.python }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies (dev)
        run: poetry install --with dev --no-interaction

      - name: Run tests
        run: poetry run pytest --cov=${{ env.PACKAGE }} --cov-report=xml

      - name: Upload coverage to Codecov (only on 3.12)
        if: matrix.python == '3.12'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
